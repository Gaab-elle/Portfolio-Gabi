export const blogPosts = [
    {
        id: 1,
        title: "Como implementei autentica√ß√£o JWT em React",
        excerpt: "Aprenda a implementar autentica√ß√£o segura em aplica√ß√µes React usando JWT tokens.",
        content: `
# Como implementei autentica√ß√£o JWT em React

A autentica√ß√£o √© uma das partes mais importantes de qualquer aplica√ß√£o web. Neste artigo, vou compartilhar como implementei um sistema de autentica√ß√£o completo usando JWT (JSON Web Tokens) em React.

## O que √© JWT?

JWT √© um padr√£o aberto (RFC 7519) que define uma forma compacta e segura de transmitir informa√ß√µes entre as partes como um objeto JSON. Essas informa√ß√µes podem ser verificadas e confi√°veis porque s√£o assinadas digitalmente.

## Estrutura do JWT

Um JWT √© composto por tr√™s partes separadas por pontos:
- **Header**: Cont√©m o tipo de token e o algoritmo de assinatura
- **Payload**: Cont√©m as claims (informa√ß√µes sobre o usu√°rio)
- **Signature**: Usada para verificar se o token n√£o foi alterado

## Implementa√ß√£o no Frontend

Primeiro, criei um contexto para gerenciar o estado de autentica√ß√£o:

\`\`\`javascript
const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [token, setToken] = useState(localStorage.getItem('token'));
  
  const login = async (credentials) => {
    const response = await api.post('/auth/login', credentials);
    const { token, user } = response.data;
    
    setToken(token);
    setUser(user);
    localStorage.setItem('token', token);
  };
  
  const logout = () => {
    setToken(null);
    setUser(null);
    localStorage.removeItem('token');
  };
  
  return (
    <AuthContext.Provider value={{ user, token, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};
\`\`\`

## Interceptador de Requisi√ß√µes

Para automatizar o envio do token em todas as requisi√ß√µes, configurei um interceptador no Axios:

\`\`\`javascript
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('token');
    if (token) {
      config.headers.Authorization = \`Bearer \${token}\`;
    }
    return config;
  },
  (error) => Promise.reject(error)
);
\`\`\`

## Prote√ß√£o de Rotas

Criei um componente para proteger rotas que requerem autentica√ß√£o:

\`\`\`javascript
const ProtectedRoute = ({ children }) => {
  const { token } = useAuth();
  
  if (!token) {
    return <Navigate to="/login" replace />;
  }
  
  return children;
};
\`\`\`

## Considera√ß√µes de Seguran√ßa

1. **Armazenamento**: Evite armazenar tokens em localStorage em produ√ß√£o
2. **Expira√ß√£o**: Sempre defina um tempo de expira√ß√£o adequado
3. **Refresh Tokens**: Implemente refresh tokens para sess√µes longas
4. **HTTPS**: Sempre use HTTPS em produ√ß√£o

## Conclus√£o

A implementa√ß√£o de JWT em React oferece uma forma elegante e segura de gerenciar autentica√ß√£o. O importante √© sempre pensar na seguran√ßa e nas melhores pr√°ticas.

Espero que este artigo tenha sido √∫til! Se tiver d√∫vidas, deixe um coment√°rio.
        `,
        date: "2025-01-08",
        category: "React",
        readTime: "8 min",
        image: "https://images.unsplash.com/photo-1633356122544-f134324a6cee?w=800&h=400&fit=crop&crop=center",
        tags: ["React", "JWT", "Authentication", "Security"],
        author: "Gabi Ribeiro"
    },
    {
        id: 2,
        title: "OWASP Top 10: Vulnerabilidades que todo dev deve conhecer",
        excerpt: "Guia pr√°tico sobre as 10 principais vulnerabilidades de seguran√ßa em aplica√ß√µes web.",
        content: `
# OWASP Top 10: Vulnerabilidades que todo dev deve conhecer

A OWASP (Open Web Application Security Project) mant√©m uma lista das principais vulnerabilidades de seguran√ßa em aplica√ß√µes web. Vou explicar cada uma e como se proteger.

## 1. Injection

**O que √©**: Falhas de inje√ß√£o ocorrem quando dados n√£o confi√°veis s√£o enviados para um interpretador como parte de um comando ou consulta.

**Como se proteger**:
- Use prepared statements
- Valida√ß√£o de entrada
- Princ√≠pio do menor privil√©gio

\`\`\`sql
-- ‚ùå Vulner√°vel
SELECT * FROM users WHERE id = $id;

-- ‚úÖ Seguro
SELECT * FROM users WHERE id = ?;
\`\`\`

## 2. Broken Authentication

**O que √©**: Falhas na implementa√ß√£o de autentica√ß√£o que permitem que atacantes comprometam senhas, chaves ou tokens.

**Como se proteger**:
- Multi-factor authentication
- Pol√≠ticas de senha forte
- Limita√ß√£o de tentativas de login

## 3. Sensitive Data Exposure

**O que √©**: Exposi√ß√£o de dados sens√≠veis devido √† falta de prote√ß√£o adequada.

**Como se proteger**:
- Criptografia de dados sens√≠veis
- HTTPS em todas as comunica√ß√µes
- N√£o armazenar dados desnecess√°rios

## 4. XML External Entities (XXE)

**O que √©**: Vulnerabilidade que permite ataques contra aplica√ß√µes que processam XML.

**Como se proteger**:
- Desabilitar entidades externas
- Usar formatos mais seguros como JSON
- Valida√ß√£o de entrada

## 5. Broken Access Control

**O que √©**: Falhas na implementa√ß√£o de controle de acesso.

**Como se proteger**:
- Implementar verifica√ß√£o de autoriza√ß√£o
- Princ√≠pio do menor privil√©gio
- Logs de acesso

## 6. Security Misconfiguration

**O que √©**: Configura√ß√µes inadequadas de seguran√ßa.

**Como se proteger**:
- Remover funcionalidades desnecess√°rias
- Configurar headers de seguran√ßa
- Manter sistemas atualizados

## 7. Cross-Site Scripting (XSS)

**O que √©**: Permite que atacantes executem scripts maliciosos no navegador das v√≠timas.

**Como se proteger**:
- Escape de sa√≠da
- Content Security Policy
- Valida√ß√£o de entrada

## 8. Insecure Deserialization

**O que √©**: Falhas na deserializa√ß√£o que podem levar √† execu√ß√£o remota de c√≥digo.

**Como se proteger**:
- Valida√ß√£o de integridade
- Isolamento de c√≥digo
- Monitoramento de deserializa√ß√£o

## 9. Using Components with Known Vulnerabilities

**O que √©**: Uso de componentes com vulnerabilidades conhecidas.

**Como se proteger**:
- Manter depend√™ncias atualizadas
- Monitorar vulnerabilidades
- Usar ferramentas de an√°lise

## 10. Insufficient Logging & Monitoring

**O que √©**: Falta de logs e monitoramento adequados.

**Como se proteger**:
- Implementar logs detalhados
- Monitoramento em tempo real
- Alertas de seguran√ßa

## Conclus√£o

A seguran√ßa √© um processo cont√≠nuo. Mantenha-se atualizado com as √∫ltimas amea√ßas e melhores pr√°ticas!
        `,
        date: "2025-01-05",
        category: "Security",
        readTime: "12 min",
        image: "https://images.unsplash.com/photo-1563206767-5b18f218e8de?w=800&h=400&fit=crop&crop=center",
        tags: ["OWASP", "Security", "Vulnerabilities", "WebSec"],
        author: "Gabi Ribeiro"
    },
    {
    id: 3,
    title: "Digispark: O 'Pendrive da For√ßa' que Pode te Transformar num Jedi da Ciberseguran√ßa",
    excerpt: "Como uma 'gambiarra' de R$ 15 pode ensinar mais sobre seguran√ßa que cursos caros. Descubra o poder do Digispark no hacking √©tico!",
    content: `
# Digispark: O "Pendrive da For√ßa" que Pode te Transformar num Jedi da Ciberseguran√ßa

## Ou: Como uma Gambiarra de R$ 15 Pode Ensinar Mais sobre Seguran√ßa que Cursos de R$ 1500

Em uma gal√°xia muito, muito distante... Na verdade, n√£o! Bem aqui em Bel√©m mesmo, onde a criatividade paraense encontra a tecnologia mundial, existe uma pequena ferramenta que parece um pendrive qualquer mas tem o poder de um sabre de luz nas m√£os certas. Estamos falando do Digispark - o Baby Yoda do mundo hacking!

## üîß O Que √© o Digispark?

Imagine um pendrive que, ao inv√©s de s√≥ guardar fotos da sua Ex e seus bregas marcantes, pode literalmente "conversar" com qualquer computador, se passando por teclado, mouse ou qualquer dispositivo USB. √â como se fosse um R2-D2 disfar√ßado de pen drive comum!

### A "Gambiarra" Genial
O Digispark √© menor que seu polegar - voc√™ pode esconder um debaixo de uma moeda! Mas n√£o se deixe enganar pelo tamanho. Este microcontrolador √© como aquelas gambiarras geniais que s√≥ o brasileiro sabe fazer: parece simples, mas resolve problemas complexos.

**Caracter√≠sticas:**
- Tamanho min√∫sculo (menor que uma moeda)
- Program√°vel via Arduino IDE
- Simula qualquer dispositivo USB
- Custo baix√≠ssimo (R$ 15-30)

## ‚ö° O Poder do Digispark: Jedi ou Sith?

### üåë O Lado Sombrio (Que Voc√™ Precisa Conhecer)
O Digispark pode ser programado como um BadUSB - imagine um pendrive possu√≠do que come√ßa a digitar comandos sozinho no computador!

**Exemplos do que um Sith faria** (mas que voc√™ NUNCA deve fazer sem autoriza√ß√£o):
- **Invasor Silencioso**: Abrir cmd, baixar malware e executar tudo em segundos
- **Destruidor de Antiv√≠rus**: Desabilitar prote√ß√µes mais r√°pido que voc√™ diz "armadilha!"
- **Espi√£o Digital**: Capturar senhas e enviar para servidor remoto
- **Palha√ßo Maldoso**: Abrir notepad e escrever "VOC√ä FOI HACKEADO!"

### üåü O Lado da For√ßa (Hacking √âtico)
Nas m√£os de um Jedi da ciberseguran√ßa, ele se torna uma arma poderosa de **prote√ß√£o**!

**O que um Jedi faz:**
- **Testa Vulnerabilidades**: Simula ataques para identificar falhas
- **Educa Funcion√°rios**: Demonstra ataques reais criando consci√™ncia
- **Melhora Defesas**: Identifica pontos fracos para fortalecer seguran√ßa
- **Automatiza Tarefas**: Login autom√°tico, backups, demos educativas

## üßò‚Äç‚ôÇÔ∏è O C√≥digo Jedi da Ciberseguran√ßa

### Princ√≠pios √âticos Fundamentais:

**ü§ù Consentimento √© Sagrado**
NUNCA use o Digispark em computador que n√£o seja seu ou sem autoriza√ß√£o expl√≠cita. Isso √© crime!

**üìú Transpar√™ncia Total**
Se √© pentester, sempre documente tudo, tenha contratos assinados e deixe claro o que est√° testando.

**üéØ Objetivo Nobre**
Use conhecimentos para proteger, n√£o atacar. Seja o Obi-Wan da sua empresa!

## üöÄ Seus Primeiros Passos no Treinamento Jedi

### Onde Encontrar Seu Digispark
- **Online**: AliExpress, MercadoLivre, Amazon (R$ 15-30)
- **Presencial**: Casas especializadas em Arduino

### Arsenal do Jedi Iniciante
- Arduino IDE (software gratuito)
- Drivers USB
- Ambiente de teste pr√≥prio
- Tutoriais b√°sicos

### Seu Primeiro "Hello, World!" Jedi

\`\`\`arduino
#include "DigiKeyboard.h"

void setup() {
  DigiKeyboard.delay(3000);
  DigiKeyboard.sendKeyStroke(KEY_R, MOD_GUI_LEFT); // Win+R
  DigiKeyboard.delay(500);
  DigiKeyboard.println("notepad");
  DigiKeyboard.delay(1000);
  DigiKeyboard.println("A For√ßa est√° com voc√™, Padawan!");
  DigiKeyboard.println("Bem-vindo √† ciberseguran√ßa √©tica!");
}

void loop() {
  // Executa s√≥ uma vez
}
\`\`\`

## üõ°Ô∏è Projetos para Evoluir

### ü•ã N√≠vel Padawan
- Automatizador de login (s√≥ seus PCs!)
- Backup express
- Demo anti-phishing
- Alertas de seguran√ßa

### ‚öîÔ∏è N√≠vel Cavaleiro Jedi
- Simulador de ataques controlados
- Teste de pol√≠ticas USB
- Auditoria automatizada
- Workshops interativos

### üåü N√≠vel Mestre Jedi
- Framework completo de testes
- Plataforma educacional
- Consultoria automatizada
- Pesquisa de vulnerabilidades

## ‚ö†Ô∏è Defendendo-se do Lado Sombrio

### Como se Proteger:
- **Nunca conecte pendrives desconhecidos**
- **Desabilite autorun** no Windows
- **Use antiv√≠rus atualizado**
- **Pol√≠tica de USB** em empresas
- **Educa√ß√£o constante** √© a melhor defesa

## üíº Carreiras no Lado da Luz

### Oportunidades Jedi:
- **Pentester**: R$ 8.000-15.000+
- **Analista de Seguran√ßa**: R$ 5.000-12.000
- **Consultor**: R$ 100-300/hora
- **Security Researcher**: R$ 10.000-20.000+
- **CISO**: R$ 15.000-40.000+

### Como se Qualificar:
- Certifica√ß√µes: CEH, CISSP, Security+
- Plataformas pr√°ticas: TryHackMe, HackTheBox
- Projetos no GitHub
- Participa√ß√£o em comunidades

## üåü Conclus√£o: Que a For√ßa Esteja com Voc√™

O Digispark √© pequeno como um gr√£o de a√ßa√≠, mas poderoso como a correnteza do Rio Amazonas. Nas m√£os certas, pode ser a chave para um futuro mais seguro e uma carreira pr√≥spera na ciberseguran√ßa.

**Lembre-se sempre:**
- ü§ù Consentimento √© sagrado
- üìö Conhecimento √© poder - use para proteger
- üåü A For√ßa √© forte, mas a responsabilidade √© mais forte
- üáßüá∑ Somos brasileiros - criatividade para o bem!

De Bel√©m para a gal√°xia, de gambiarras brasileiras para solu√ß√µes globais de seguran√ßa, o caminho est√° aberto. A escolha √© sua, jovem Padawan!

**Que a For√ßa (e a √©tica) estejam sempre com voc√™!** ‚öîÔ∏è‚ú®

---

*Se voc√™ chegou at√© aqui sem correr para comprar um Digispark, √© porque realmente entendeu o poder da responsabilidade! E lembra: se usar essas informa√ß√µes para o mal, Yoda vai aparecer nos seus sonhos! üëª‚öîÔ∏è*
    `,
    date: "2025-07-08",
    category: "Security",
    readTime: "10 min",
    image: '/Img/Digispark (1).jpeg',
    tags: ["Digispark", "Hacking √âtico", "Ciberseguran√ßa", "BadUSB", "Pentesting"],
    author: "Gabi Ribeiro"
},
 {
    id: 4,
    title: "Java vs Python: Por que Java √© Melhor para Iniciantes",
    excerpt: "Uma an√°lise divertida de por que Java, exemplificado pelo sucesso do Minecraft, oferece uma base mais s√≥lida para iniciantes em programa√ß√£o do que Python.",
    content: `
# Java vs Python: Por que Java √© Melhor para Iniciantes

## Ou: Como o Minecraft Provou que Java √© Mais Legal que Cobras

Em Bel√©m, onde o sol se p√µe deslumbrante e a inova√ß√£o tecnol√≥gica floresce (e onde o calor faz voc√™ questionar suas escolhas de vida), a pergunta sobre qual linguagem de programa√ß√£o √© a melhor para iniciantes ressoa entre entusiastas e aspirantes a desenvolvedores. Dentre as gigantes Python e Java, a discuss√£o sobre qual delas oferece o melhor ponto de partida √© mais acalorada que um debate sobre a√ßa√≠ com granola e ninho.

## üß± Por que Java Constr√≥i Bases Mais S√≥lidas

Java pode parecer mais "assustador" com sua sintaxe rigorosa, mas √© exatamente essa exig√™ncia que constr√≥i uma base de conhecimento mais s√≥lida - como construir uma casa de bedrock em vez de areia.

### Tipagem Est√°tica: O GPS do Seu C√≥digo

Diferentemente de Python, Java exige declara√ß√µes expl√≠citas de tipos:

**Python (Problem√°tico):**
\`\`\`python
def dividir(a, b):
    return a / b

resultado = dividir(10, "dois")  # Erro s√≥ na execu√ß√£o!
\`\`\`

**Java (Seguro):**
\`\`\`java
public static double dividir(double a, double b) {
    if (b == 0) {
        throw new ArithmeticException("Divis√£o por zero!");
    }
    return a / b;
}
\`\`\`

Java te obriga a pensar nos erros **antes** que eles aconte√ßam!

## üéÆ Minecraft: O Exemplo Definitivo do Poder Java

O Minecraft n√£o √© apenas um jogo - √© um universo de possibilidades! Desenvolvido inteiramente em Java por Markus "Notch" Persson, o jogo prova que Java permite criar aplica√ß√µes complexas e escal√°veis.

**Fatos impressionantes:**
- Mais de 300 milh√µes de c√≥pias vendidas
- Criado por um programador "normal" que se tornou bilion√°rio
- Demonstra o potencial extraordin√°rio do Java

### Aprendizado Atrav√©s da Pr√°tica

Desenvolver mods para Minecraft oferece:
- **Resultados tang√≠veis**: Cada linha de c√≥digo vira a√ß√£o no jogo
- **OOP na pr√°tica**: Intera√ß√£o com Player, Block, World
- **Motiva√ß√£o constante**: Gratifica√ß√£o instant√¢nea mant√©m o engajamento

## ‚öîÔ∏è Java vs Python: Compara√ß√£o Honesta

### Sintaxe
**Python:**
\`\`\`python
print("Hello World!")
\`\`\`

**Java:**
\`\`\`java
public class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello World!");
    }
}
\`\`\`

Python √© tipo mandar um "oi" no WhatsApp, Java √© uma carta formal - mais trabalhoso, mas ensina disciplina!

### Performance
- **Java**: Como uma Ferrari - compilado, otimizado pela JVM
- **Python**: Como um fusca - interpretado, mais lento

### Mercado de Trabalho
**Java oferece:**
- Maior n√∫mero de oportunidades
- Sal√°rios m√©dios superiores
- Projetos de maior escala
- Comunidade empresarial estabelecida

## üöÄ Vantagens do Java para Iniciantes

### 1. Base S√≥lida
Java prepara para o rigor encontrado em projetos reais - como aprender os alicerces antes de construir o pr√©dio.

### 2. Ponte para o Mundo Corporativo
- Linguagem do Android
- Usada por Google, Netflix, Amazon
- Gateway para Spring Framework, microservices

### 3. Ferramentas Superiores
IDEs como IntelliJ IDEA e Eclipse oferecem recursos avan√ßados de debugging e an√°lise.

## üêç Desvantagens do Python para Iniciantes

### Flexibilidade Excessiva
A filosofia "s√≥ existe uma maneira" do Python √© violada mais que limite de velocidade. M√∫ltiplas abordagens confundem iniciantes.

### Limita√ß√µes de Performance
Para jogos, gr√°ficos ou processamento intensivo, Python √© frustrante - como correr maratona de chinelos.

### Transi√ß√£o Dif√≠cil
Iniciantes que come√ßam com Python lutam ao migrar para linguagens compiladas.

## üèÜ Conclus√£o: Escolha Sua Aventura

Para quem busca n√£o apenas escrever c√≥digo, mas **entender** como software √© constru√≠do, Java oferece base inigual√°vel. √â como escolher entre aprender a dirigir num Uno ou numa Ferrari - a Ferrari √© mais complicada no in√≠cio, mas quando voc√™ domina, pode dirigir qualquer coisa!

### O Caminho Java
1. **Comece com Minecraft**: Crie mods divertidos
2. **Domine os fundamentos**: OOP, tipagem, exce√ß√µes
3. **Expanda horizontes**: Android, web, enterprise

### A Pergunta Final
Qual ser√° a primeira modifica√ß√£o que voc√™ far√° no Minecraft com Java? Um mod de pizzas voadoras? Creepers amig√°veis? Ou talvez voc√™ sonhe maior: o pr√≥ximo jogo viral?

**Java te dar√° as ferramentas para construir n√£o apenas mundos virtuais, mas o futuro digital. O c√©u n√£o √© o limite - √© apenas o ponto de partida!** üöÄ‚òï

---

*Gostou do artigo? Java √© tipo o a√ßa√≠ de Bel√©m - pode at√© existir imita√ß√£o por a√≠, mas o original sempre vai ser superior!* ü•£‚òï
--Leia o artigo completo no meu blog:
    `,
    date: "2025-07-07",
    category: "Programming",
    readTime: "12 min",
    image: '/Img/javaxpython.png',
    tags: ["Java", "Python", "Programming", "Minecraft", "Iniciantes"],
    author: "Gabi Ribeiro"
}]